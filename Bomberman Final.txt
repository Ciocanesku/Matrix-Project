#include "LedControl.h"
#include <EEPROM.h>
#include <LiquidCrystal.h>


const byte rs = 9;
const byte en = 8;
const byte d4 = 7;
const byte d5 = 6;
const byte d6 = 5;
const byte d7 = 4;
const byte pinBright = 10;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);


const byte dinPin = 12;
const byte clockPin = 13;
const byte loadPin = 2;
const byte matrixSize = 8;
LedControl lc = LedControl(dinPin, clockPin, loadPin, 1);
const int pinSW = A4; 
const int pinX = A0;
const int pinY = A1;


const char alphabet[] = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'};

const int pinBuzzer = 11;
const int trasholdRight = 620;
const int trasholdLeft = 420;
const int trasholdUp = 607;
const int trasholdDown = 407;

const int playerBlinkInterval = 500;
const int bombBlinkInterval = 250;

const int nrMain = 0;
const int nrSettings = 1;
const int nrAbout = 2;
const int nrBrightnessLCD = 3;
const int nrBrightnessMatr = 4;
const int nrDifficulty = 5;
const int nrHigh = 6;
const int nrName = 7;
const int nrHowTo = 8;

int difficultyLevels[] = {15, 50, 65};

int xValue = 0;
int yValue = 0;

int countForResetScores = 0;

bool wallsGenerated = false;
const int matrixExtendSize = 16;
bool wallMatrix[matrixExtendSize][matrixExtendSize]; // Matrix to store the wall configuration
int playerRow = 1;
int playerCol = 1;
int bombRow = -1; // Initial bomb position set to invalid
int bombCol = -1;
int percentage = 25; //percentage for completion of map
bool moveRegistered = false;
bool bombPlaced = false;
unsigned long bombStartTime = 0;
const unsigned long bombDuration = 3000; //
int wallsCleared = 0;
int highScore1 = 0;
int highScore2 = 0;
int highScore3 = 0;
int score = 0;
bool gameFinished = false;
int bombsPlaced = 0;
int numberOfWalls = 0;
bool showedEndMessage = false;
int lives = 2;
bool deathFromBomb = false;

const uint64_t crown[] = {
  0x0000ffffffff9900
};
const int crownLen = sizeof(crown)/8;

const uint64_t end[] = {
  0xf0d010f00f0d010f
};
const int endLen = sizeof(end)/8;

const uint64_t dead[] = {
  0x00423c00a542a500
};
const int deadLen = sizeof(dead)/8;

const uint64_t welcome[] = {
  0x4949494f49490940
};
const int welcome_LEN = sizeof(welcome)/8;

const uint64_t menu[] = {
  0x7eff810000c3c300
};
const int menu_LEN = sizeof(menu)/8;

const uint64_t settings[] = {
  0x181818183c666624
};
const int settings_LEN = sizeof(settings)/8;

const uint64_t about[] = {
  0x3c4299998199423c
};
const int about_LEN = sizeof(about)/8;

const uint64_t brightness[] = {
  0x003c4e4e4e4e3c00
};
const int brightness_LEN = sizeof(brightness)/8;

const uint64_t difficulty[] = {
  0x005755d553d10000
};
const int difficultySize = sizeof(difficulty)/8;






bool gameStarted = false;

const String mainMenuOptions[] = {"Start game", "Settings", "About", "High Score", "How to play"};
const String settingsMenuOptions[] = {"LCD Bright", "Matr Bright", "Sound: ", "Name ", "Back"};
const String brightnessMenuOptions[] = {"LOW", "MEDIUM", "HIGH", "Back"};
const String difficultyMenuOptions[] = {"Easy", "Medium", "Hard", "Back"};

const int menuMaxPosition[9] = {4,4,3,3,3,3,3,25,7};
const int leftRight=3;

int currentOption = 0;
int currentLeftRight = 0;
int currentMenu = 0;

const int debounceDelay = 50;  

unsigned long lastDebounceTime = 0;
unsigned long currentTime = millis();

bool buttonPressed = false;
bool displayedStartMessage = false;
int startMessageTime = 2500;
bool clearAfterWelcome = false;

byte matrixBrightVal[] ={0, 7, 15}; 
const int matrixBrightValAddress = 2;
byte matrixBrightness = 0;

byte lcdBrightVal[] = {55, 155, 255};
const int lcdBrightValAddress = 3;
int lcdBright = 0;

const int highscore1ValAddress = 0; 
const int highscore2ValAddress = 4; 
const int highscore3ValAddress = 5; 

const int highName1ValAddress = 6; 
const int highName2ValAddress = 9; 
const int highName3ValAddress = 12; 

char name1Score[4] ="AAA";
char name2Score[4] ="AAA";
char name3Score[4] ="AAA"; 

int sound = 1;
const int soundValAddress = 1;


unsigned long int currentTimeExplode=0;
const int explodeBeepTime = 25;
const int bombExplodeFreq = 1000;
const int bombExplodeTime = 200;
const int menuMoveFreq = 500;
const int menuMoveTime = 50;
const int bombExplodedTime = 200;
const int bombExplodedFreq = 50;

const int doorColPos[] = {3,4,3,4,7,7,8,8,7,7,8,8,11,11,12,12};
const int doorRowPos[] = {7,7,8,8,3,4,3,4,11,12,11,12,7,8,7,8};
const int doorsNumber = 16;

char currentName[4] = "AAA";

byte downArrow[8] = {
	0b00000,
	0b00000,
	0b00100,
	0b00100,
	0b00100,
	0b10101,
	0b01110,
	0b00100
};

byte upArrow[8] = {
	0b00100,
	0b01110,
	0b10101,
	0b00100,
	0b00100,
	0b00100,
	0b00100,
	0b00100
};

byte option[8] = {
	0b00000,
	0b00010,
	0b00100,
	0b01111,
	0b00100,
	0b00010,
	0b00000,
	0b00000
};

byte heart[8] = {
	0b00000,
	0b00000,
	0b11011,
	0b11111,
	0b11111,
	0b11111,
	0b01110,
	0b00100
};

byte arrowRight[8] = {
	0b00000,
	0b00000,
	0b00100,
	0b00010,
	0b11111,
	0b00010,
	0b00100,
	0b00000
};



void setup()
{ 
  pinMode(pinBright, OUTPUT);
  pinMode(pinSW, INPUT_PULLUP);
  pinMode(pinBuzzer, OUTPUT);
  wallsGenerated = false;
  matrixBrightness = EEPROM.read(matrixBrightValAddress);
  lcdBright = EEPROM.read(lcdBrightValAddress);
  sound = EEPROM.read(soundValAddress);
  highScore1 = EEPROM.read(highscore1ValAddress);
  highScore2 = EEPROM.read(highscore2ValAddress);
  highScore3 = EEPROM.read(highscore3ValAddress);  
  readName(highName1ValAddress,name1Score);
  readName(highName2ValAddress,name2Score);
  readName(highName3ValAddress,name3Score);
  randomSeed(analogRead(A0)); // Seed the random number generator
  lc.shutdown(0, false);
  lc.setIntensity(0, matrixBrightness);
  lc.clearDisplay(0);
  lcd.begin(16, 2);
  lcd.clear();
  lcd.createChar(1, upArrow);
  lcd.createChar(2, downArrow);
  lcd.createChar(3,option);
  lcd.createChar(4,heart);
  lcd.createChar(5, arrowRight);
  Serial.begin(9600);
  analogWrite(pinBright, lcdBright);
  Serial.print(name1Score);
}

void loop()
{
  displayStartMessage();
  if(displayedStartMessage)
  {
  if(!gameStarted)
  {
    handleMenu();
  }
  else
  {
    runGame();
  }
  }
}

void changeName(char s[3], char sp[3])
{
  strcpy(s,sp);
}

void putName(int val, char s[3])
{
  EEPROM.put(val,s[0]);
  EEPROM.put(val+1,s[1]);
  EEPROM.put(val+2,s[2]);
}

void readName(int val, char s[3])
{
  s[0] = EEPROM.read(val);
  s[1] = EEPROM.read(val+1);
  s[2] = EEPROM.read(val+2);
}
void clearName(int val)
{
  EEPROM.put(val,"A");
  EEPROM.put(val+1,"A");
  EEPROM.put(val+2,"A");
}

void displayPlayer(int row, int col, bool on)
{
  lc.setLed(0, row, col, on);
}

void displayBomb(int row, int col, bool on)
{
  lc.setLed(0, row, col, on);
}

void displayWall(int row, int col, bool on)
{
  lc.setLed(0, row, col, on);
}

void clearMatrix()
{
  for (int row = 0; row < matrixSize; row++)
  {
    for (int col = 0; col < matrixSize; col++)
    {
      lc.setLed(0, row, col, false);
    }
  }
}

void generateRandomWalls(int percentage)
{
  for (int row = 0; row < matrixExtendSize; row++)
  {
    for (int col = 0; col < matrixExtendSize; col++)
    {
      if(col!=0 && col!=matrixSize && col!=matrixExtendSize-1 && row!=0 && row!=matrixSize && row!=matrixExtendSize-1 && row!=matrixSize-1 && col != matrixSize-1)
      {
      int randomValue = random(100);
      if (row > 2 || col > 2)
        {wallMatrix[row][col] = (randomValue < percentage);
        }
      }
      else {
      wallMatrix[row][col] = true;
      }
    }
  }
  for(int i = 0; i < doorsNumber; i++)
  {
    wallMatrix[doorRowPos[i]][doorColPos[i]]=false;
  }

}

void displayWalls()
{
  int displayRowStart=0;
  int displayRowEnd=0;
  int displayColStart=0;
  int displayColEnd=0;
  if(playerRow>7)
    {
      displayRowStart = matrixSize;
      displayRowEnd = matrixExtendSize;
    }
  else
  {
      displayRowEnd = matrixSize;
  }
  if(playerCol>7)
    {
      displayColStart = matrixSize;
      displayColEnd = matrixExtendSize;
    }
  else
  {
      displayColEnd = matrixSize;
  }
  for (int row = displayRowStart; row < displayRowEnd; row++)
  {
    for (int col = displayColStart; col < displayColEnd; col++)
    {
      if (wallMatrix[row][col])
      {
        displayWall(row%matrixSize, col%matrixSize, true);
      }
    }
  }
}

void handleJoystickInput()
{
  currentTime=millis();
  if (!moveRegistered)
  {
    if (xValue >= trasholdRight)
    {
      movePlayer(0, 1); // Move right
      moveRegistered = true;
    }
    else if (xValue <= trasholdLeft)
    {
      movePlayer(0, -1); // Move left
      moveRegistered = true;
    }
    else if (yValue >= trasholdUp)
    {
      movePlayer(1, 0); // Move up
      moveRegistered = true;
    }
    else if (yValue <= trasholdDown)
    {
      movePlayer(-1, 0); // Move down
      moveRegistered = true;
    }
  }
  else
  {
    // Check if joystick is back in the neutral position
    if (xValue > trasholdLeft && xValue < trasholdRight && yValue < trasholdUp && yValue > trasholdDown)
    {
      moveRegistered = false;
    }
  }

  // Check if the button is pressed and place a bomb if not already placed
  if (digitalRead(pinSW) == LOW && !bombPlaced && (currentTime-lastDebounceTime >= debounceDelay) && !buttonPressed)
  {
    lastDebounceTime=currentTime;
    buttonPressed = !buttonPressed;
    placeBomb();
  }
  else if(buttonPressed && digitalRead(pinSW)==HIGH)
  {
    buttonPressed = !buttonPressed;
  }
}

void movePlayer(int rowChange, int colChange)
{
  
    int nextRow = playerRow + rowChange;
    int nextCol = playerCol + colChange;

  // Check if the next position is within the matrix boundaries and not a wall
  if (nextRow >= 0 && nextRow < matrixExtendSize && nextCol >= 0 && nextCol < matrixExtendSize && !wallMatrix[nextRow][nextCol])
  {
    
    // Clear the previous position
    displayPlayer(playerRow%matrixSize, playerCol%matrixSize, false);


    if(nextRow<matrixSize && playerRow >= matrixSize || playerRow<matrixSize && nextRow >= matrixSize) //check if the rows goes in another 8x8 matrix
    {
      clearMatrix();
    }

    if(nextCol<matrixSize && playerCol >= matrixSize || playerCol<matrixSize && nextCol >= matrixSize) //check if the rows goes in another 8x8 matrix
    {
      clearMatrix();
    }

    // Update the player's position
    playerRow = nextRow;
    playerCol = nextCol;
    displayWalls();

  }
}

void placeBomb()
{
  // Place a bomb at the player's current position if there is no bomb already placed
  if (!bombPlaced)
  {
    bombRow = playerRow;
    bombCol = playerCol;
    bombPlaced = true;
    bombStartTime = millis();
    currentTimeExplode = millis();
    bombsPlaced++;
  }
}

void explodeBomb()
{
   // Check if the player is in the bomb range
  if (playerRow >= bombRow - 1 && playerRow <= bombRow + 1 &&
      playerCol >= bombCol - 1 && playerCol <= bombCol + 1) {
    lives--;
    if(lives==0)
    {gameFinished = true;
    deathFromBomb = true;
    }
  }
  // Clear the bomb and reset bomb-related variables
  displayBomb(bombRow%matrixSize, bombCol%matrixSize, false);
  clearMatrix();
  // Iterate through neighboring cells around the bomb
  for (int row = bombRow - 1; row <= bombRow + 1; row++)
  {
    for (int col = bombCol - 1; col <= bombCol + 1; col++)
    {
      // Check if the neighboring cell is within the matrix boundaries
      if (row >= 0 && row < matrixExtendSize && col >= 0 && col < matrixExtendSize)
      {
        // Clear the wall if present
        if (wallMatrix[row][col] && col!=0 && col!=matrixSize && col!=matrixExtendSize-1 && row!=0 && row!=matrixSize && row!=matrixExtendSize-1 && row!=matrixSize-1 && col != matrixSize-1)
        {
          displayWall(row%matrixSize, col%matrixSize, false);
          wallMatrix[row][col] = false; // Update the wallMatrix to reflect the cleared wall
          wallsCleared++;
        }
      }
    }
  }

  bombPlaced = false;
  bombRow = -1;
  bombCol = -1;

  // Handle any additional bomb explosion logic here
  // For example, you can perform any other desired actions after the walls are cleared
}

void checkFinished()
{
  int ok=1;
    for (int row = 0; row < matrixExtendSize && ok==1; row++)
  {
    for (int col = 0; col < matrixExtendSize && ok==1; col++)
    {
      if (wallMatrix[row][col] == true && col!=0 && col!=matrixSize && col!=matrixExtendSize-1 && row!=0 && row!=matrixSize && row!=matrixExtendSize-1 && row!=matrixSize-1 && col != matrixSize-1)
      {
        ok=0;
      }
    }
  }
  if(ok == 1)
    gameFinished=1;
}

void endOfTheGame()
  {
    if(!showedEndMessage)
    {clearMatrix();
    lcd.clear();
    if(!deathFromBomb)
    {score = (wallsCleared*5) - (bombsPlaced * 3);
    highScore1 = EEPROM.read(highscore1ValAddress);
    highScore2 = EEPROM.read(highscore2ValAddress);
    highScore3 = EEPROM.read(highscore3ValAddress);
    if(score > highScore1 || score > highScore2 || score > highScore3 )
    {
      lcd.setCursor(1, 0);
      lcd.print("NEW HIGHSCORE");
      lcd.setCursor(5,1);
      displayImage(crown);

      if(score>highScore1)
      {
        highScore3 = highScore2;
        highScore2 = highScore1;
        highScore1 = score; 

        changeName(name3Score,name2Score);
        changeName(name2Score,name1Score); 
        changeName(name1Score,currentName);    
      }
      else if(score>highScore2)
      {
        highScore3=highScore2;
        highScore2=score;
        changeName(name3Score,name2Score);
        changeName(name2Score,currentName);
      }
      else if(score>highScore3)
      {
        highScore3=score;
        changeName(name3Score,currentName);
      }

      EEPROM.put(highscore1ValAddress, highScore1);
      EEPROM.put(highscore2ValAddress, highScore2);
      EEPROM.put(highscore3ValAddress, highScore3); 
      putName(highName1ValAddress, name1Score);
      putName(highName2ValAddress, name2Score);
      putName(highName3ValAddress, name3Score); 
      lcd.print(score); 
    }
    else {
    lcd.clear();
    lcd.setCursor(3, 0);
    lcd.print("Your score: ");
    lcd.setCursor(5,1);
    lcd.print(score);
    displayImage(end);
    }
    }
    else {
      lcd.clear();
      lcd.setCursor(2, 0);
      lcd.print("You died :( !");
      displayImage(dead);
    }
    showedEndMessage = !showedEndMessage;
    }

  if (digitalRead(pinSW) == LOW && (currentTime-lastDebounceTime >= debounceDelay) && !buttonPressed)
  {
    buttonPressed = !buttonPressed;
    lastDebounceTime = currentTime;
    restartGame();
  }
  else if(buttonPressed && digitalRead(pinSW)==HIGH)
  {
    buttonPressed = !buttonPressed;
  }


  }



void displayImage(const uint64_t *imageData) {
  for (int row = 0; row < matrixSize; row++) {
    for (int col = 0; col < matrixSize; col++) {
      bool pixelState = (imageData[0] >> (row * matrixSize + col)) & 0x01;
      lc.setLed(0, row, col, pixelState);
    }
  }
}

void runGame()
{
  if(!gameFinished)
  {
  lcd.setCursor(0,0);
  lcd.write(4);
  lcd.print(":");
  lcd.print(lives);
  lcd.setCursor(7,0);
  lcd.print("Bombs:");
  lcd.print(bombsPlaced);

  lcd.setCursor(1, 1);
  lcd.print("Walls bombed:");
  lcd.print(wallsCleared);
  displayWalls();

  xValue = analogRead(pinX);
  yValue = analogRead(pinY);

  handleJoystickInput();

  // Check if the bomb is placed and handle its explosion
  if (bombPlaced)
  {
    unsigned long currentTime = millis();
    if(sound && currentTime-currentTimeExplode >= bombExplodeTime)
    {
      tone(pinBuzzer,bombExplodeFreq,explodeBeepTime);
      currentTimeExplode = millis();
    }

    if (currentTime - bombStartTime >= bombDuration)
    {
      explodeBomb();
      if(sound)
      tone(pinBuzzer, bombExplodedFreq, bombExplodedTime);
    }

  }

  // Display the player and bomb at the updated positions
  displayPlayer(playerRow%matrixSize, playerCol%matrixSize, millis() % (2 * playerBlinkInterval) < playerBlinkInterval);
  displayBomb(bombRow%matrixSize, bombCol%matrixSize, millis() % (2 * bombBlinkInterval) < bombBlinkInterval);
  checkFinished();
  }
  else
  {
    endOfTheGame();
  }
}

void handleMenu()
{
  xValue = analogRead(pinX);
  yValue = analogRead(pinY);

if (!moveRegistered)
  {
    currentTime = millis();
    if (yValue >= trasholdUp)
    {

      if(currentOption+1 <= menuMaxPosition[currentMenu])
        {
          if(sound)
          tone(pinBuzzer, menuMoveFreq, menuMoveTime);
          currentOption++;
          if(currentMenu == nrName)
          {
            currentName[currentLeftRight]=alphabet[currentOption];
          }
        }
      moveRegistered = true;
      lcd.clear();
    }
    else if (yValue <= trasholdDown)
    {
      if(currentOption-1 >= 0)
        {currentOption--;
        if(sound)
        tone(pinBuzzer, menuMoveFreq, menuMoveTime);
        if(currentMenu == nrName)
          {
            currentName[currentLeftRight]=alphabet[currentOption];
          }
        }
      moveRegistered = true;
      lcd.clear();
    }
    else if (xValue >= trasholdRight && currentMenu == nrName)
    {
      if(currentLeftRight<leftRight)
        currentLeftRight++;
      moveRegistered = true;
      lcd.clear();
    }
    else if (xValue <= trasholdLeft && currentMenu == nrName)
    {
      if(currentLeftRight>0)
        currentLeftRight--;
      moveRegistered = true;
      lcd.clear();

    } 
  }
  else
  {
    // Check if joystick is back in the neutral position
    if (xValue > trasholdLeft && xValue < trasholdRight && yValue < trasholdUp && yValue > trasholdDown)
    {
      moveRegistered = false;
    }
  }

  if(currentMenu == nrMain)
    displayMainMenu();
  else if (currentMenu == nrSettings)
    displaySettingsMenu();
  else if (currentMenu ==nrAbout)
    displayAbout();
  else if (currentMenu == nrBrightnessLCD || currentMenu == nrBrightnessMatr)
    displayBrightness();
  else if (currentMenu == nrDifficulty)
    displayDifficultyMenu();
  else if (currentMenu == nrHigh)
    displayHighScoresMenu();
  else if(currentMenu == nrName)
    displayNameMenu();
  else if(currentMenu == nrHowTo)
    displayHowTo(); 

  // Check if the button is pressed and place a bomb if not already placed
  if (digitalRead(pinSW) == LOW && (currentTime-lastDebounceTime >= debounceDelay) && !buttonPressed)
  {
    buttonPressed = !buttonPressed;
    lastDebounceTime = currentTime;
    clearMatrix();
    if(currentMenu == nrMain) //handle main menu
    {
      if(currentOption == 0)
        {currentMenu = nrDifficulty;
        lcd.clear();
        }
      if(currentOption == 1)
        {
        lcd.clear();
        currentMenu = nrSettings;
        currentOption = 0;
        }
      if(currentOption == 2)
      {
        lcd.clear();
        currentMenu = nrAbout;
        currentOption = 0;
      }
      if(currentOption == 3)
      {
        lcd.clear();
        currentMenu = nrHigh;
        currentOption = 0;
      }
      if(currentOption == 4)
      {
        lcd.clear();
        currentMenu = nrHowTo;
        currentOption = 0;
      }
    }
    else if(currentMenu == nrSettings) //handle settings menu
    {
      if(currentOption == 0)
      {
        lcd.clear();
        currentMenu = nrBrightnessLCD;
        currentOption = 0;
      }
      else if(currentOption == 1)
      {
        lcd.clear();
        currentMenu = nrBrightnessMatr;
        currentOption = 0;
      }
      else if(currentOption == 2)
      {
        lcd.clear();
        if(sound==1)
          sound = 0;
        else
          sound = 1;
      }
      else if(currentOption == 3)
      {
        lcd.clear();
        currentMenu = nrName;
        currentOption = 0;
      }

           
      else if(currentOption == 4)
        {
          currentOption = 0;
          lcd.clear();
          currentMenu = nrMain;
          EEPROM.put(soundValAddress,sound);
        }
    }
    else if (currentMenu == nrAbout) // handle about 
    {
      if(currentOption == 3)
        {
          currentOption = 0;
          lcd.clear();
          currentMenu = nrMain;
        }
    }
    else if (currentMenu == nrBrightnessLCD) // handle lcd brightness 
    {
      if(currentOption == 0 || currentOption == 1 || currentOption == 2)
      {
        EEPROM.put(lcdBrightValAddress, lcdBrightVal[2-currentOption]);
        lcdBright = lcdBrightVal[currentOption];
        analogWrite(pinBright, lcdBright);
      }
      if(currentOption == 3)
        {
          currentOption = 0;
          lcd.clear();
          currentMenu = nrSettings;
        }
    }
    else if (currentMenu == nrBrightnessMatr) // handle matrix brightness 
    {
      if(currentOption == 0 || currentOption == 1 || currentOption == 2 ){
          matrixBrightness = matrixBrightVal[currentOption];
          EEPROM.put(matrixBrightValAddress,matrixBrightness);
          lc.setIntensity(0, matrixBrightness);  
      }
      else if(currentOption == 3)
        {
          currentOption = 0;
          lcd.clear();
          currentMenu = nrSettings ;
        }
    }
    else if (currentMenu == nrDifficulty) // handle matrix brightness 
    {
      if(currentOption == 0 || currentOption == 1 || currentOption == 2 ){
          gameStarted = 1;
          percentage = difficultyLevels[currentOption];
            if (!wallsGenerated)
            {
              generateRandomWalls(percentage);
              wallsGenerated = true;
            }
            lcd.clear();
      }
      else if(currentOption == 3)
        {
          currentOption = 0;
          lcd.clear();
          currentMenu = nrMain ;
        }
    }
    else if (currentMenu == nrHigh) // handle Highscores 
    {
      if(currentOption == 2)
      {
        countForResetScores++;
        if(countForResetScores==2)
        {
          highScore1 = 0;
          highScore2 = 0;
          highScore3 = 0;
          EEPROM.put(highscore1ValAddress,0);
          EEPROM.put(highscore2ValAddress,0);
          EEPROM.put(highscore3ValAddress,0);
          clearName(highName1ValAddress);
          clearName(highName2ValAddress);
          clearName(highName3ValAddress);
          readName(highName1ValAddress,name1Score);
          readName(highName2ValAddress,name2Score);
          readName(highName3ValAddress,name3Score);
          countForResetScores = 0;
        }
      }
      else if(currentOption == 3)
        {
          currentOption = 0;
          lcd.clear();
          currentMenu = nrMain;
          countForResetScores = 0;
        }
    }
    else if (currentMenu == nrName) // handle Name 
    {
      if(currentLeftRight == 3)
        {
          currentOption = 0;
          lcd.clear();
          currentMenu = nrSettings;
          currentLeftRight = 0;
        }
    }
    else if (currentMenu == nrHowTo) // handle How To
    {
      if(currentOption == 7)
        {
          currentOption = 0;
          lcd.clear();
          currentMenu = nrMain;
        }
    }


  }
  else if(buttonPressed && digitalRead(pinSW)==HIGH)
  {
    buttonPressed = !buttonPressed;

  }
}

void displayNameMenu()
{
  if(currentLeftRight == 0)
  {
    lcd.setCursor(4,0);
    lcd.print("Name");
    lcd.setCursor(1,1);
    lcd.write(5);
    lcd.print(currentName[0]);
    lcd.print("  ");
    lcd.print(currentName[1]);
    lcd.print("  ");
    lcd.print(currentName[2]);
    lcd.print("  ");
    lcd.print("Save");
  }
  else if(currentLeftRight == 1)
  {
    lcd.setCursor(4,0);
    lcd.print("Name");
    lcd.setCursor(1,1);
    lcd.print("  ");
    lcd.print(currentName[0]);
    lcd.write(5);    
    lcd.print(currentName[1]);
    lcd.print("  ");
    lcd.print(currentName[2]);
    lcd.print("  ");
    lcd.print("Save");
  }
  else if(currentLeftRight == 2)
  {
    lcd.setCursor(4,0);
    lcd.print("Name");
    lcd.setCursor(1,1);
    lcd.print("  ");
    lcd.print(currentName[0]);
    lcd.print("  ");
    lcd.print(currentName[1]);
    lcd.write(5); 
    lcd.print(currentName[2]);
    lcd.print("  ");
    lcd.print("Save");
  }
  else if(currentLeftRight==3)
  {
    lcd.setCursor(4,0);
    lcd.print("Name");
    lcd.setCursor(1,1);
    lcd.print("  ");
    lcd.print(currentName[0]);
    lcd.print("  ");
    lcd.print(currentName[1]);
    lcd.print("  ");
    lcd.print(currentName[2]);
    lcd.write(5); 
    lcd.print("Save");
  }
  


}


void displayDifficultyMenu()
{
   displayImage(difficulty); // Funcția displayImage() trebuie să fie definită pentru a afișa imaginea corespunzătoare dificultății
   if(currentOption == 0)
   {
      lcd.setCursor(5, 0);
      lcd.print("Difficulty");
      lcd.setCursor(1, 1);
      lcd.print(currentOption + 1);
      lcd.print(".");
      lcd.print(difficultyMenuOptions[currentOption]);
      lcd.write(3);
      lcd.setCursor(15, 1);
      lcd.write(2);
   }
   else if(currentOption == 1)
   {
      lcd.setCursor(0, 0);
      lcd.write(1);
      lcd.print(currentOption);
      lcd.print(".");
      lcd.print(difficultyMenuOptions[currentOption - 1]);

      lcd.setCursor(1, 1);
      lcd.print(currentOption + 1);
      lcd.print(".");
      lcd.print(difficultyMenuOptions[currentOption]);
      lcd.write(3);
      lcd.setCursor(15, 1);
      lcd.write(2);
   }
   else if(currentOption == 2)
   {
      lcd.setCursor(0, 0);
      lcd.write(1);
      lcd.print(currentOption);
      lcd.print(".");
      lcd.print(difficultyMenuOptions[currentOption - 1]);

      lcd.setCursor(1, 1);
      lcd.print(currentOption + 1);
      lcd.print(".");
      lcd.print(difficultyMenuOptions[currentOption]);
      lcd.write(3);
   }
   else if(currentOption == 3)
   {
      // Opțiune pentru butonul "Back"
      lcd.setCursor(0, 0);
      lcd.print("< Back");

      lcd.setCursor(1, 1);
      lcd.print(" ");
      lcd.print(currentOption + 1);
      lcd.print(".");
      lcd.print(difficultyMenuOptions[currentOption]);
      lcd.write(3);
   }
}


void displayHighScoresMenu() {
   displayImage(crown); // Replace with the function to display the high scores image

   if (currentOption == 0) {
      lcd.setCursor(3, 0);
      lcd.print("High Scores ");

      lcd.setCursor(1, 1);
      lcd.print(currentOption + 1);
      lcd.print(".");
      lcd.print(highScore1);
      lcd.print(": ");
      lcd.print(name1Score);

      lcd.setCursor(15, 1);
      lcd.write(2);
   }
   else if (currentOption == 1) {
      lcd.setCursor(0, 0);
      lcd.write(1);
      lcd.print(currentOption + 1);
      lcd.print(".");
      lcd.print(highScore2);
      lcd.print(": ");
      lcd.print(name2Score);

      lcd.setCursor(1, 1);
      lcd.print(currentOption + 2);
      lcd.print(".");
      lcd.print(highScore3);
      lcd.print(": ");
      lcd.print(name3Score);      
      lcd.setCursor(15, 1);
      lcd.write(2);
   } 
      else if (currentOption == 2) {
      lcd.setCursor(0, 0);
      lcd.write(1);
      lcd.print("Double press");

      lcd.setCursor(0, 1);
      lcd.print("to reset scores");
      lcd.setCursor(15, 1);
      lcd.write(2);
   }

   else if (currentOption == 3) {
      // Back option
      lcd.setCursor(0, 0);
      lcd.write(1);
      lcd.print("Press Button");

      lcd.setCursor(0, 1);
      lcd.print("to go back");
      lcd.write(2);
   }
}

void displayMainMenu()
{
  displayImage(menu);
  if(currentOption==0)
  {
    lcd.setCursor(5, 0);
    lcd.print("Main Menu");
    lcd.setCursor(1, 1);
    lcd.print(currentOption+1);
    lcd.print(".");
    lcd.print(mainMenuOptions[currentOption]);
    lcd.write(3);
    lcd.setCursor(15, 1);
    lcd.write(2);

  }
  else if(currentOption==1)
  {
    
    lcd.setCursor(0, 0);
    lcd.write(1);
    lcd.print(currentOption);
    lcd.print(".");
    lcd.print(mainMenuOptions[currentOption-1]);

    lcd.setCursor(1, 1);
    lcd.print(currentOption+1);
    lcd.print(".");
    lcd.print(mainMenuOptions[currentOption]);
    lcd.write(3);
    lcd.setCursor(15, 1);
    lcd.write(2);

  }

    else if(currentOption==2)
  {
    
    lcd.setCursor(0, 0);
    lcd.write(1);
    lcd.print(currentOption);
    lcd.print(".");
    lcd.print(mainMenuOptions[currentOption-1]);

    lcd.setCursor(1, 1);
    lcd.print(currentOption+1);
    lcd.print(".");
    lcd.print(mainMenuOptions[currentOption]);
    lcd.write(3);
    lcd.setCursor(15, 1);
    lcd.write(2);

  }

    else if(currentOption==3)
  {
    
    lcd.setCursor(0, 0);
    lcd.write(1);
    lcd.print(currentOption);
    lcd.print(".");
    lcd.print(mainMenuOptions[currentOption-1]);

    lcd.setCursor(1, 1);
    lcd.print(currentOption+1);
    lcd.print(".");
    lcd.print(mainMenuOptions[currentOption]);
    lcd.write(3);
    lcd.setCursor(15, 1);
    lcd.write(2);

  }
  else if(currentOption==4)
  {
    
    lcd.setCursor(0, 0);
    lcd.write(1);
    lcd.print(currentOption);
    lcd.print(".");
    lcd.print(mainMenuOptions[currentOption-1]);

    lcd.setCursor(1, 1);
    lcd.print(currentOption+1);
    lcd.print(".");
    lcd.print(mainMenuOptions[currentOption]);
    lcd.write(3);

  }
}


void displayStartMessage()
{

  if(millis() <= startMessageTime && !displayedStartMessage)
    {
  lcd.setCursor(4, 0);
  lcd.print("GET READY");
  lcd.setCursor(3, 1);
  lcd.print("TO EXPLODE");
  displayImage(welcome);
  playStartUpMelody();

    }
  else if(!clearAfterWelcome)
  {
    displayedStartMessage = !displayedStartMessage;
    lcd.clear();
    clearMatrix();
    clearAfterWelcome = !clearAfterWelcome;

  }
}
void playStartUpMelody() {
  int startUpMelody[] = {262, 330, 392, 523, 659, 784, 988, 1175, 1319, 1568, 1673, 1784}; // Example frequencies
  int noteDuration = 200;
  static int currentNote = 0;
  static unsigned long previousMillis = 0;

  if (millis() - previousMillis >= noteDuration) {
    if(sound)
    tone(pinBuzzer, startUpMelody[currentNote], noteDuration);
    previousMillis = millis();
    currentNote++;

    if (currentNote >= sizeof(startUpMelody) / sizeof(startUpMelody[0])) {
      // Melody is finished
      currentNote = 0;
      noTone(pinBuzzer);
    }
  }
}


void restartGame()
{
  // Reset game-related variables
  gameStarted = false;
  gameFinished = false;
  showedEndMessage = false;
  deathFromBomb = false;

  lives = 2;
  // Reset player position
  playerRow = 1;
  playerCol = 1;

  // Reset bomb-related variables
  bombPlaced = false;
  bombRow = -1;
  bombCol = -1;
  bombStartTime = 0;

  // Reset wall-related variables
  wallsGenerated = false;
  wallsCleared = 0;
  bombsPlaced = 0;
  numberOfWalls = 0;

  // Clear the LCD and LED matrix
  lcd.clear();
  lc.clearDisplay(0);
  clearMatrix();

  // Restart menu variables
  currentOption = 0;
  currentMenu = 0;

}

void displaySettingsMenu()
{
   displayImage(settings);
   if(currentOption==0)
  {
    lcd.setCursor(5, 0);
    lcd.print("Settings");
    lcd.setCursor(1, 1);
    lcd.print(currentOption+1);
    lcd.print(".");
    lcd.print(settingsMenuOptions[currentOption]);
    lcd.write(3);
    lcd.setCursor(15, 1);
    lcd.write(2);

  }
  else if(currentOption==1)
  {
    
    lcd.setCursor(0, 0);
    lcd.write(1);
    lcd.print(currentOption);
    lcd.print(".");
    lcd.print(settingsMenuOptions[currentOption-1]);

    lcd.setCursor(1, 1);
    lcd.print(currentOption+1);
    lcd.print(".");
    lcd.print(settingsMenuOptions[currentOption]);
    lcd.write(3);
    lcd.setCursor(15, 1);
    lcd.write(2);

  }
    else if(currentOption==2)
  {
    
    lcd.setCursor(0, 0);
    lcd.write(1);
    lcd.print(currentOption);
    lcd.print(".");
    lcd.print(settingsMenuOptions[currentOption-1]);

    lcd.setCursor(1, 1);
    lcd.print(currentOption+1);
    lcd.print(".");
    lcd.print(settingsMenuOptions[currentOption]);
    if(sound)
      lcd.print("ON");
    else
     lcd.print("OFF");
    lcd.write(3);
    lcd.setCursor(15, 1);
    lcd.write(2);

  }
  else if(currentOption==3)
  {
    
    lcd.setCursor(0, 0);
    lcd.write(1);
    lcd.print(currentOption);
    lcd.print(".");
    lcd.print(settingsMenuOptions[currentOption-1]);
    lcd.print("ON/OFF");

    lcd.setCursor(1, 1);
    lcd.print(currentOption+1);
    lcd.print(".");
    lcd.print(settingsMenuOptions[currentOption]);
    lcd.print(": ");
    lcd.print(currentName);
    lcd.write(3);
    lcd.setCursor(15, 1);
    lcd.write(2);

  }


    else if(currentOption==4)
  {
    
    lcd.setCursor(0, 0);
    lcd.write(1);
    lcd.print(currentOption);
    lcd.print(".");
    lcd.print(settingsMenuOptions[currentOption-1]);

    lcd.setCursor(1, 1);
    lcd.print(currentOption+1);
    lcd.print(".");
    lcd.print(settingsMenuOptions[currentOption]);
    lcd.write(3);

  }
}

void displayAbout()
{
  displayImage(about);
  if(currentOption == 0)
  {
    lcd.setCursor(5, 0);
    lcd.print("About");
    lcd.setCursor(1, 1);
    lcd.print("Game:Bomberman");
    lcd.setCursor(15, 1);
    lcd.write(2);
  }
  else if(currentOption==1)
  {
    
    lcd.setCursor(0, 0);
    lcd.write(1);
    lcd.print("Author: Ciocan");

    lcd.setCursor(1, 1);
    lcd.print("Andrei-Madalin");
    lcd.setCursor(15, 1);
    lcd.write(2);

  }
    else if(currentOption==2)
  {
    
    lcd.setCursor(0, 0);
    lcd.write(1);
    lcd.setCursor(5, 0);
    lcd.print("Github:");

    lcd.setCursor(1, 1);
    lcd.print("/Ciocanesku");
    lcd.setCursor(15, 1);
    lcd.write(2);

  }
  else if(currentOption==3)
  {
    
    lcd.setCursor(0, 0);
    lcd.write(1);
    lcd.print("Press button");

    lcd.setCursor(1, 1);
    lcd.print("to go back");

  }



}

void displayHowTo()
{
  displayImage(about);
  if(currentOption == 0)
  {
    lcd.setCursor(0, 0);
    lcd.print("Place bombs");
    lcd.setCursor(0, 1);
    lcd.print("in order to");
    lcd.setCursor(15, 1);
    lcd.write(2);
  }
  else if(currentOption==1)
  {
    
    lcd.setCursor(0, 0);
    lcd.write(1);
    lcd.print("destroy all");

    lcd.setCursor(0, 1);
    lcd.print("the walls.");
    lcd.setCursor(15, 1);
    lcd.write(2);

  }
    else if(currentOption==2)
  {
    
    lcd.setCursor(0, 0);
    lcd.write(1);
    lcd.print("Each bomb");

    lcd.setCursor(0, 1);
    lcd.print("placed is -5");
    lcd.setCursor(15, 1);
    lcd.write(2);

  }
  else if(currentOption==3)
  {
    
    lcd.setCursor(0, 0);
    lcd.write(1);
    lcd.print("and each wall");

    lcd.setCursor(0, 1);
    lcd.print("bombed is +3.");
    lcd.setCursor(15, 1);
    lcd.write(2);

  }
  else if(currentOption==4) 
  {
    
    lcd.setCursor(0, 0);
    lcd.write(1);
    lcd.print("Your goal is");

    lcd.setCursor(0, 1);
    lcd.print("to destroy the");
    lcd.setCursor(15, 1);
    lcd.write(2);

  }
  else if(currentOption==5)
  {
    
    lcd.setCursor(0, 0);
    lcd.write(1);
    lcd.print("walls, but not");

    lcd.setCursor(0, 1);
    lcd.print("the room walls,");
    lcd.setCursor(15, 1);
    lcd.write(2);

  }
  else if(currentOption==6)
  {
    
    lcd.setCursor(0, 0);
    lcd.write(1);
    lcd.print("as efficient as");

    lcd.setCursor(0, 1);
    lcd.print("you can.");
    lcd.setCursor(15, 1);
    lcd.write(2);

  }
  else if(currentOption==7)
  {
    
    lcd.setCursor(0, 0);
    lcd.write(1);
    lcd.setCursor(3, 0);
    lcd.print("HAVE FUN!");

    lcd.setCursor(1, 1);
    lcd.print("<Go back");

  }



}

void displayBrightness()
{
  displayImage(brightness);
   if(currentOption==0)
  {
    lcd.setCursor(1, 0);
    lcd.print("Choose option: ");
    lcd.setCursor(1, 1);
    lcd.print(currentOption+1);
    lcd.print(".");
    lcd.print(brightnessMenuOptions[currentOption]);
    lcd.write(3);
    lcd.setCursor(15, 1);
    lcd.write(2);

  }
  else if(currentOption==1)
  {
    
    lcd.setCursor(0, 0);
    lcd.write(1);
    lcd.print(currentOption);
    lcd.print(".");
    lcd.print(brightnessMenuOptions[currentOption-1]);

    lcd.setCursor(1, 1);
    lcd.print(currentOption+1);
    lcd.print(".");
    lcd.print(brightnessMenuOptions[currentOption]);
    lcd.write(3);
    lcd.setCursor(15, 1);
    lcd.write(2);

  }

    else if(currentOption==2)
  {
    
    lcd.setCursor(0, 0);
    lcd.write(1);
    lcd.print(currentOption);
    lcd.print(".");
    lcd.print(brightnessMenuOptions[currentOption-1]);

    lcd.setCursor(1, 1);
    lcd.print(currentOption+1);
    lcd.print(".");
    lcd.print(brightnessMenuOptions[currentOption]);
    lcd.write(3);
    lcd.setCursor(15, 1);
    lcd.write(2);
  }

      else if(currentOption==3)
  {
    
    lcd.setCursor(0, 0);
    lcd.write(1);
    lcd.print(currentOption);
    lcd.print(".");
    lcd.print(brightnessMenuOptions[currentOption-1]);

    lcd.setCursor(1, 1);
    lcd.print(currentOption+1);
    lcd.print(".");
    lcd.print(brightnessMenuOptions[currentOption]);
    lcd.write(3);

  }

}
